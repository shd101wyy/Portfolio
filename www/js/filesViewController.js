// global variable
var FILE_LIST_POINTER, FILE_LIST_DATA;

/**
 *
 *
 * File {
 * 		name:
 * 		kind:
 * 		size:
 * 		commit_revision:
 * 		commit_author:
 * 		commit_date
 * 		parent:
 * 		single_name:
 * 		files: (children)
 * }
 *
 */
function File (info){
    this.name = info.name;
    this.kind = info.kind;
    this.size = info.size;
    this.commit_revision = info.commit_revision;
    this.commit_author = info.commit_author;
    this.commit_date = info.commit_date;
    this.parent = info.parent;
    this.single_name = info.single_name;
    this.files = {};
}
/**
 * Clean the JSON file that is generated by xml2js
 */
function cleanListJSON(list_json){
    /**
     * Output is in format of
     * {
     *     name:
     *     kind:
     *     size:
     *     commit_revision:
     *     commit_author:
     *     commit_date:
     *     parent:    get parent folder
     *     children:  if it is dir, recursively list all children
     * }
     */
    var home_directory = new File({
        name: ".",
        kind: "dir",
        size: "undefined",
        commit_revision: "undefined",
        commit_author: "undefined",
        commit_date: "undefined",
        parent: null,
        single_name: "."
    });
    list_json = list_json.lists.list[0].entry;
    /**
     * Right now each element in list_json looks like
     * {
        "$":{
           "kind":"dir"
        },
        "name":[
           "Assignment0"
        ],
        "commit":[
           {
              "$":{
                 "revision":"478"
              },
              "author":[
                 "ywang189"
              ],
              "date":[
                 "2015-02-06T02:50:23.452896Z"
              ]
           }
        ]
     }
     *
     */
    for(var i = 0; i < list_json.length; i++){
        var element = list_json[i];
        var info = {
                kind: element.$.kind,
                name: element.name[0],
                // commit: element.commit[0],
                size: (element.$.kind == "file" ? element.size[0] : "undefined"),
                commit_revision: element.commit[0].$.revision,
                commit_author: element.commit[0].author[0],
                commit_date: element.commit[0].date[0]
        };
        // split file name
        var file_name_arr = element.name[0].split("/");
        var current_folder = home_directory;
        for(var j = 0; j < file_name_arr.length; j++){
            if (file_name_arr[j] in current_folder.files){ // go to subfolder
                current_folder = current_folder.files[file_name_arr[j]];
            }
            else{
                var new_file = new File( info );
                new_file.parent = current_folder;
                new_file.single_name = file_name_arr[j];
                current_folder.files[new_file.single_name] = new_file; // add to directory
            }
        }
    }
    return home_directory;
}

/**
 * Show file information
 */

function showFileInfo(file){
    // console.log(file);
    if (file.name === "."){
        $("#info_name").text("Home Directory .");
        $("#info_path").text("Portfolio by Yiyi Wang ywang189");
        $("#info_kind").text("");
        $("#info_size").text("");
        $("#info_commit_revision").text("");
        $("#info_commit_author").text("");
        $("#info_commit_date").text("");
        return;
    }
    $("#info_name").text("Name: " + file.single_name);
    $("#info_path").text("Path: " + file.name);
    $("#info_kind").text("Kind: " + file.kind);

    if (file.kind === "dir"){ // directory, so no size
        $("#info_size").hide();
    }
    else{ // file
        $("#info_size").show();
        $("#info_size").text("Size: " + file.size);
    }

    $("#info_commit_revision").text("Commit Revision: " + file.commit_revision);
    $("#info_commit_author").text("Commit Author: " + file.commit_author);
    $("#info_commit_date").text("Commit Date: " + file.commit_date);

}

/**
 * file_info
 *  {
 *     name:
 *     kind:
 *     size:
 *     commit_revision:
 *     commit_author:
 *     commit_date:
 *     parent:    get parent folder
 *     children:  if it is dir, recursively list all children
 * }
 *
 */
function generateDivObjectForFile(file_info){
    var file_div = $("<div></div>");
    if (file_info.kind === "dir"){ // directory
        file_div.addClass("tile bg-amber");
        file_div.append('<div class="tile-content icon"><i class="icon-folder-2"></i></div>'); // add icon
    }
    else{ // file
        file_div.addClass("tile bg-cyan");
        file_div.append('<div class="tile-content icon"><i class="icon-file"></i></div>'); // add icon
    }
    var file_brand = $("<div></div>").addClass("brand bg-dark opacity");
    var file_name = $("<span></span>").addClass("text").text(file_info.single_name);
    file_div.attr({data: file_info}); // save data

    file_brand.append(file_name);
    file_div.append(file_brand);

    // user click directory
    if (file_info.kind === "dir"){ // directory
        // bind click function
        file_div.click(function(){
            generateFileList(file_info);
        });
    }
    else{
        // bind click function
        file_div.click(function(){
            clickFileTile(file_info);
        });
    }
    return file_div;
}

/**
 * Clicked file tile
 */
function clickFileTile(file_data){
    $("#files_view").html("");
    // create back tile
    createBackTile(file_data.parent);

    // show file info
    showFileInfo(file_data);

    // show file content
    socket.emit("query_file", {file_name: file_data.name, user_id: user_id});

    // get file content
    socket.on("query_file_success", function(data){
        // show data in ace editor
        var editor = $("<div></div>").attr({"id": "editor"}).css({"width": $("#files_view").width()-$("#back_tile").width()-30, "height": "90%"});
        $("#files_view").append(editor);
        var ace_editor = ace.edit("editor");
        var modelist = ace.require('ace/ext/modelist'); // use mode list to auto select language mode
        var mode = modelist.getModeForPath(file_data.name).mode;
        ace_editor.session.setMode(mode);
        ace_editor.setValue(data);
        ace_editor.setReadOnly(true); // dont allow to change the content

    });

    // fail to get file content
    socket.on("query_file_fail", function(){
        var not = $.Notify({
            caption: "Query File Failed",
            content: "name: " + file_data.name,
            timeout: 10000 // 10 seconds
        });
    });
}

/*
 * create back tile
 */
function createBackTile(parent){
    if (parent === "." || parent === null) return "";
    var back_div = $("<div></div>").addClass("tile bg-darkRed").attr({"id":"back_tile"});
    var back_brand = $("<div></div>").addClass("brand bg-dark opacity");
    var back_name = $("<span></span>").addClass("text").text("back");
    back_div.append('<div class="tile-content icon"><i class="icon-arrow-left"></i></div>'); // add icon

    back_brand.append(back_name);
    back_div.append(back_brand);

    // bind click function
    back_div.click(function(){
        generateFileList(parent);
    });
    $("#files_view").append(back_div);
    return back_div;
}

/**
 * Generate file list tree
 * tree id: file_list_tree
 *
 * <div class="tile bg-cyan">
     <div class="brand bg-dark opacity">
         <span class="text">
             Hello
         </span>
     </div>
 </div>
 */
 function generateFileList(file_data){
     // clear files_view
     $("#files_view").html("");

     // create back tile
     createBackTile(file_data.parent);

     // draw children files/directories
     var file_info = null;
     var children = file_data.files;
     for(var file_name in children){
         file_info = children[file_name];
         $("#files_view").append(generateDivObjectForFile(file_info));
     }

     // show file info
     showFileInfo(file_data);
 }
